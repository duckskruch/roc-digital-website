import { NextRequest, NextResponse } from 'next/server';

const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN || '8245451263:AAHbZuvrTtauSPuLrHTQzK9ikRDgo6DtBEE';
const TELEGRAM_ACCOUNT_ID = process.env.TELEGRAM_ACCOUNT_ID || '5241289583';

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { name, email, phone, company, message, serviceType } = body;
    
    console.log('Received form data:', { name, email, phone, company, message, serviceType });
    console.log('Environment check:', { 
      hasToken: !!TELEGRAM_BOT_TOKEN, 
      hasAccountId: !!TELEGRAM_ACCOUNT_ID,
      tokenLength: TELEGRAM_BOT_TOKEN?.length || 0
    });

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!name || !email) {
      return NextResponse.json(
        { error: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è' },
        { status: 400 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
    if (!TELEGRAM_BOT_TOKEN || !TELEGRAM_ACCOUNT_ID) {
      console.error('Telegram bot token or account ID not configured');
      console.log('Form data received:', { name, email, company, message, serviceType });
      
      // –í—Ä–µ–º–µ–Ω–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
      return NextResponse.json({
        success: true,
        message: '–ó–∞—è–≤–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è. (Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)'
      });
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
    const telegramMessage = `
üÜï *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞ ROC Digital*

üë§ *–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*
‚Ä¢ –ò–º—è: ${name}
‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç: ${email}
${company ? `‚Ä¢ –ö–æ–º–ø–∞–Ω–∏—è: ${company}` : ''}

üìã *–î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏:*
${serviceType ? `‚Ä¢ –¢–∏–ø —É—Å–ª—É–≥–∏: ${serviceType}` : ''}
${message ? `‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–µ: ${message}` : ''}
${phone ? `‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: ${phone}` : ''}

‚è∞ *–í—Ä–µ–º—è:* ${new Date().toLocaleString('ru-RU', {
      timeZone: 'Europe/Moscow',
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    })}

üåê *–ò—Å—Ç–æ—á–Ω–∏–∫:* ROC Digital Website
    `.trim();

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
    const telegramResponse = await fetch(
      `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`,
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: TELEGRAM_ACCOUNT_ID,
          text: telegramMessage,
          parse_mode: 'Markdown',
          disable_web_page_preview: true,
        }),
      }
    );

    if (!telegramResponse.ok) {
      const errorData = await telegramResponse.text();
      console.error('Telegram API error:', errorData);
      console.error('Response status:', telegramResponse.status);
      console.error('Response headers:', telegramResponse.headers);
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—É—é –æ—à–∏–±–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      return NextResponse.json(
        { error: `–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: ${telegramResponse.status} - ${errorData}` },
        { status: 500 }
      );
    }

    // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
    console.log('Form submitted successfully:', { name, email, phone });

    return NextResponse.json({
      success: true,
      message: '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.'
    });

  } catch (error) {
    console.error('Form submission error:', error);
    console.error('Error details:', error instanceof Error ? error.message : 'Unknown error');
    
    // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤—Å–µ —Ä–∞–≤–Ω–æ –ª–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
    try {
      const body = await request.json();
      console.log('Form data that failed:', body);
    } catch (e) {
      console.log('Could not parse request body');
    }
    
    return NextResponse.json(
      { error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –Ω–∞–ø—Ä—è–º—É—é.' },
      { status: 500 }
    );
  }
}
